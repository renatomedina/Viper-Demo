//
//  ListPresenter.swift
//  zap-challenge-viper
//
//  Created by Renato Medina on 29/03/19.
//  Copyright (c) 2019 Renato Medina. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class ListPresenter {

    // MARK: - Private properties -
    private unowned let _view: ListViewInterface
    private let _wireframe: ListWireframeInterface
    private let _interactor: ListInteractorInterface
    private let _loginInteractor: LoginInteractorInterface

    private var items: [Property] = [] {
        didSet {
            _view.reloadData()
        }
    }
    
    // MARK: - Lifecycle -
    init(wireframe: ListWireframeInterface, view: ListViewInterface, interactor: ListInteractorInterface, loginInteractor: LoginInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
        _loginInteractor = loginInteractor
    }
    
}

// MARK: - Extensions -

extension ListPresenter: ListPresenterInterface {
    
    func updateLoginButtonTitle() {
        let isLogged = _loginInteractor.isLogged()
        _view.setButtonTitle(text: isLogged ? "Logout" : "Login")
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        let property = items[indexPath.row]
        _wireframe.navigate(to: .details(property))
    }
    
    func viewDidLoad() {
        _interactor.getProperties { [weak self] items in
            self?.items = items
            self?._view.reloadData()
        }
    }
    
    func tapLoginButton() {
        let isLogged = _loginInteractor.isLogged()
        
        if isLogged {
            _loginInteractor.logout()
            self.updateLoginButtonTitle()
        }else {
            _wireframe.navigate(to: .login)
        }
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOrItems(in section: Int) -> Int {
        return items.count
    }

    func item(at indexPath: IndexPath) -> Property {
        return items[indexPath.row]
    }
}
